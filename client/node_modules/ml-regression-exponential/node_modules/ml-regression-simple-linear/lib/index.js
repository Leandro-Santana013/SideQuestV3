"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleLinearRegression = void 0;
const ml_regression_base_1 = __importStar(require("ml-regression-base"));
/**
 * Class representing simple linear regression.
 * The regression uses OLS to calculate intercept and slope.
 */
class SimpleLinearRegression extends ml_regression_base_1.default {
    /**
     * @param x - explanatory variable
     * @param y - response variable
     */
    constructor(x, y) {
        super();
        // @ts-expect-error internal use of the constructor, from `this.load`
        if (x === true) {
            // @ts-expect-error internal use of the constructor, from `this.load`
            const yObj = y;
            this.slope = yObj.slope;
            this.intercept = yObj.intercept;
            this.coefficients = [yObj.intercept, yObj.slope];
        }
        else {
            (0, ml_regression_base_1.checkArrayLength)(x, y);
            const result = regress(x, y);
            this.slope = result.slope;
            this.intercept = result.intercept;
            this.coefficients = [result.intercept, result.slope];
        }
    }
    /**
     * Get the parameters and model name in JSON format
     * @returns
     */
    toJSON() {
        return {
            name: 'simpleLinearRegression',
            slope: this.slope,
            intercept: this.intercept,
        };
    }
    _predict(x) {
        return this.slope * x + this.intercept;
    }
    /**
     * Finds x for the given y value.
     * @param y - response variable value
     * @returns - x value
     */
    computeX(y) {
        return (y - this.intercept) / this.slope;
    }
    /**
     * Strings the linear function in the form 'f(x) = ax + b'
     * @param precision - number of significant figures.
     * @returns
     */
    toString(precision) {
        let result = 'f(x) = ';
        if (this.slope !== 0) {
            const xFactor = (0, ml_regression_base_1.maybeToPrecision)(this.slope, precision);
            result += `${xFactor === '1' ? '' : `${xFactor} * `}x`;
            if (this.intercept !== 0) {
                const absIntercept = Math.abs(this.intercept);
                const operator = absIntercept === this.intercept ? '+' : '-';
                result += ` ${operator} ${(0, ml_regression_base_1.maybeToPrecision)(absIntercept, precision)}`;
            }
        }
        else {
            result += (0, ml_regression_base_1.maybeToPrecision)(this.intercept, precision);
        }
        return result;
    }
    /**
     * Strings the linear function in the form 'f(x) = ax + b'
     * @param precision - number of significant figures.
     * @returns
     */
    toLaTeX(precision) {
        return this.toString(precision);
    }
    /**
     * Class instance from a JSON Object.
     * @param json
     * @returns
     */
    static load(json) {
        if (json.name !== 'simpleLinearRegression') {
            throw new TypeError('not a SLR model');
        }
        // @ts-expect-error internal use of the constructor
        return new SimpleLinearRegression(true, json);
    }
}
exports.SimpleLinearRegression = SimpleLinearRegression;
/**
 * Internal  function.
 * It determines the parameters (slope, intercept) of the line that best fit the `x,y` vector-data (simple linear regression).
 * @param x - explanatory variable
 * @param y - response variable
 * @returns - slope and intercept of the best fit line
 */
function regress(x, y) {
    const n = x.length;
    let xSum = 0;
    let ySum = 0;
    let xSquared = 0;
    let xY = 0;
    for (let i = 0; i < n; i++) {
        xSum += x[i];
        ySum += y[i];
        xSquared += x[i] * x[i];
        xY += x[i] * y[i];
    }
    const numerator = n * xY - xSum * ySum;
    const slope = numerator / (n * xSquared - xSum * xSum);
    return {
        slope,
        intercept: (1 / n) * ySum - slope * (1 / n) * xSum,
    };
}
//# sourceMappingURL=index.js.map